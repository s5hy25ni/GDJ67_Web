<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.min.edu.model.DynamicDaoImpl">
<!-- 
		Dynamic 쿼리 사용시 주의점
		1) 판단문을 사용할 때는 객체를 사용해서 처리(Object, Map)
		2) 특수문법의 사용시 반드시 테스트
		3) <where> 사용시 필요한 곳에 작업
 -->
	<sql id="selAll">
		SELECT JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY
			FROM JOB
	</sql>
	
	<!-- 
			IF문은 로직처리하면 너무 느림 쿼리가 가장 빠름 
			IF문을 통해서 조건판단을 만들어 WHERE 절을 추가
	-->
	<select id="getJobIf" parameterType="java.util.Map" resultType="JobDTO">
				<include refid="selAll"/>
				<where>
					<if test="job_id != null"> <!-- java 문법(equals = eq, not equals = ne, 문장 비교시에 '') -->
						JOB_ID = #{job_id}
					</if>
				</where>
	</select>
	
	
	<!-- 
			Iterator를 통해서 쿼리문 생성 (값, 값, 값, ...) 문장 생성
			prameterType은 List, Map<String, String[]>
			collection 속성이 List인 경우 list, Map인 경우 Map의 key로 입력해줘야 한다.
	 -->
	<select id="getJobList" parameterType="java.util.List" resultType="JobDTO">
		<include refid="selAll" />
		WHERE JOB_ID IN
		<!-- parameterType이 List이기 때문에 list로 작성한다. -->
		<foreach collection="list"  item="job_id" open="(" separator="," close=")"> <!-- item은 값만 담는 변수 -->
			#{job_id}
		</foreach>
	</select>
	
	<select id="getJobMap" parameterType="java.util.Map" resultType="JobDTO">
		<include refid="selAll" />
		WHERE JOB_ID IN
	<!-- parameterType이 Map이기 때문에 key는 collection에 작성한다. -->
		<foreach collection="ids" item="job_id" open="(" separator="," close=")">
			#{job_id}
		</foreach>
	</select>
	
	<!-- 
			choose 선택문, 여러 개의 where절 중에서 단 한 개의 쿼리만 생성되도록 한다. 
			사용하는 곳 : 하나의 컬럼을 선택하여 결과를 출력할 때 사용
	-->
	<select id="getJobChoose" parameterType="JobDTO" resultType="JobDTO">
		<include refid="selAll" />
		<where>
			<choose>
				<when test="jobId">
					JOB_ID = #{jobId}	
				</when>
				<when test="jobTitle">
					JOB_TITLE = #{jobTitle}
				</when>
				<otherwise></otherwise>
			</choose>
		</where>
	</select>
	
	<select id="getJobTrim" parameterType="JobDTO" resultType="JobDTO">
		<include refid="selAll" />
		<trim prefix="where" prefixOverrides="AND"> <!-- 여러 개를 override 할 경우 'AND |OR' 처럼 | 다음에 띄어쓰기 없이 -->
			<if test="jobId != null">
				JOB_ID = #{jobId}
			</if>
			<if test="jobTitle != null">
				AND JOB_TITLE = #{jobTitle}
			</if>			
		</trim>
	</select>
	
	<!-- 
			하나의 테이블에 한 개 혹은 여러 개를 수정할 때 사용
			(tag는 상관 없다 delete여도 update문 쓰면 update)
	 -->
	<delete id="updateJobSet" parameterType="JobDTO">
		UPDATE JOB
			<set> <!-- ,에 대해 subffix override가 되어 있어서 자동으로 지운다. -->
				<if test="jobId != null">
					JOB_ID = #{jobId},
				</if>
				<if test="jobTitle != null">
					JOB_TITLE = #{jobTitle}
				</if>
			</set>
			WHERE JOB_ID = 'IT_PROG'
	</delete>
	
	<update id="updateJobTrim" parameterType="JobDTO">
			UPDATE JOB
				<trim prefix="SET" suffixOverrides=",">
					<if test="jobTitle != null">
						JOB_TITLE = #{jobTitle},
					</if>
					<if test="minSalary > 100">
						MIN_SALARY = #{minSalary},
					</if>
				</trim>
			WHERE JOB_ID = 'IT'
	</update>
	
</mapper>